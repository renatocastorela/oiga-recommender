<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
	<http pattern="/resources/**" security="none" />
	<http pattern="/admin/h2/**" security="none" />
	<http use-expressions="true">
		    <csrf/>
		<!-- Authentication policy -->
		<form-login login-page="/signin" login-processing-url="/signin/authenticate" authentication-failure-url="/signin?param.error=bad_credentials" 
		/>
		<logout logout-url="/signout" delete-cookies="JSESSIONID" 
		 success-handler-ref="logoutSuccessHandler" />
		<intercept-url pattern="/favicon.ico" access="permitAll" />
		<intercept-url pattern="/resources/**" access="permitAll" />
		<intercept-url pattern="/auth/**" access="permitAll" />
		<intercept-url pattern="/signin/**" access="permitAll" />
		<intercept-url pattern="/signup/**" access="permitAll" />
		<intercept-url pattern="/disconnect/facebook" access="permitAll" />
		<intercept-url pattern="/users/register/**" access="permitAll"/>
		<intercept-url pattern="/**" access="permitAll"  />
		<remember-me />
		<!--  Spring Social Security authentication filter
		<custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />
		 -->
	</http>
	<!-- NOTA IMPORTANTE: El apartado de seguridad esta pobremente implementado, se intento utilizar un framework que integra
		spring security con spring social, algunas elementos no son usados como 'socialAuthenticationProvider' ya que su funcionalidad
		esta provista por el 'signInAdapter' ver como evoluciona esta integracion para mejorar la interaccion
	-->
	<authentication-manager alias="authenticationManager">
		<!-- Spring Social Security authentication provider -->
		<authentication-provider ref="socialAuthenticationProvider" />
	</authentication-manager>	
	<beans:bean id="logoutSuccessHandler" class="org.oiga.web.social.signin.LogoutSuccessHandler" />
    <!-- Social Security -->
    <beans:bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter"
		c:_0-ref="authenticationManager"
		c:_1-ref="userIdSource"
		c:_2-ref="usersConnectionRepository"
		c:_3-ref="connectionFactoryLocator"
		p:signupUrl="/users/register" /> 
		<!-- TODO: Figure out how to wire this without this name -->
	<beans:bean id="socialAuthenticationProvider" class="org.springframework.social.security.SocialAuthenticationProvider"
		c:_0-ref="usersConnectionRepository"
		c:_1-ref="userDetailsService" />
		
	<beans:bean id="userDetailsService" class="org.oiga.web.social.security.SimpleSocialUsersDetailService" />
	<beans:bean id="userIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource" />		
	<beans:bean id="signInAdapter" class="org.oiga.web.social.signin.SimpleSignInAdapter" autowire="constructor" />
	 <!--
        This bean encrypts the authorization details of the connection. In
        our example, the authorization details are stored as plain text.
        DO NOT USE THIS IN PRODUCTION.
    -->
    <beans:bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />
</beans:beans>